<?php

/*
Plugin Name:  WP PleaseWait
Plugin URI:   https://ngoclb.com/project/wp-please-wait
Description:  Add PleaseWait loading screen to currrent theme
Version:      2.0
Author:       Ngoc LB
Author URI:   https://ngoclb.com/
License:      MIT License
*/

if ( ! defined( 'ABSPATH' ) ) {
  die();
}

require 'pleasewait-settings.php';

register_uninstall_hook(plugin_basename(__FILE__), array('WpPleaseWait_SettingsPage', 'clear_settings'));

class WpPleaseWait {

  private static $instance;
  private $options;

  public function __construct()	{
    $this->options = WpPleaseWait_SettingsPage::getInstance()->get_options();
    // var_dump($this->options); die;
    $this->load_actions();
  }

  public function uninstall() {
    //
  }

  /**
   * Singleton instance
   */
  public static function getInstance() {
    if (!self::$instance) {
      self::$instance = new self();
    }
    return self::$instance;
  }

  function load_actions() {
    // Hook
    add_action( 'wp_enqueue_scripts', array( $this, 'add_styles_scripts' ) );
    if ($this->options['auto_mode']) {
      add_action( 'wp_head', array( $this, 'add_inline_styles' ), 999 );
      add_action( 'wp_footer', array($this, 'add_inline_scripts'), 999 );
    } else {
      $hook_name = $this->options['hook_name'];
      add_action( $hook_name, array( $this, 'add_inline_styles' ) );
      add_action( $hook_name, array( $this, 'add_inline_scripts' ) );
    }
  }

  function add_styles_scripts() {
    wp_enqueue_style( 'spinkit',
      ( $this->options['use_cdn'] ? 'https://cdnjs.cloudflare.com/ajax/libs/spinkit/1.2.5' : WpPleaseWait_SettingsPage::getInstance()->get_assets_url('assets') )
      . '/spinkit.min.css' );
    wp_enqueue_style( 'please-wait-css',
      ( $this->options['use_cdn'] ? 'https://cdnjs.cloudflare.com/ajax/libs/please-wait/0.0.5' : WpPleaseWait_SettingsPage::getInstance()->get_assets_url('assets') )
      . '/please-wait.min.css' );
    wp_enqueue_script( 'please-wait-js',
      ( $this->options['use_cdn'] ? 'https://cdnjs.cloudflare.com/ajax/libs/please-wait/0.0.5' : WpPleaseWait_SettingsPage::getInstance()->get_assets_url('assets') )
     . '/please-wait.min.js', array(), '0.0.5', false );
  }

  function combine_to_oneline($html_css_js, $rm_trailing_space = true) {
    $one_line = str_replace(array("\r\n", "\r", "\n", "\t"), "  ", $html_css_js);
    if ($rm_trailing_space) {
      while (strpos($one_line, "  ") > -1) {
        $one_line = str_replace("  ", " ", $one_line);
      }
    }
    return $one_line;
  }

  function get_plugin_info() {
    $ver = WpPleaseWait_SettingsPage::CURRENT_VERSION;
    $url = WpPleaseWait_SettingsPage::GITHUB_URL;
    return "<!-- Generated by WP PleaseWait v${ver} - ${url} -->\n";
  }

  function get_loading_template() {
    $message = isset($this->options['custom_message']) ? trim($this->options['custom_message']) : '';
    if (!empty($message)) {
        $message = explode("\n", $message);
        shuffle($message);
        $message = reset($message);
    }
    $message = apply_filters('wp_pleasewait_message', $message);
    $tpl_spinner = '<div class="pg-loading-html"></div>';
    $tpl_loading = '<div class="loading-message">' . $message . '</div>';
    $tpl_loading = isset($this->options['custom_message_pos']) && $this->options['custom_message_pos'] === 'below'
    ? $tpl_spinner . $tpl_loading
    : $tpl_loading . $tpl_spinner;

    return sprintf($this->options['loading_template'], $tpl_loading);
  }

  function add_inline_styles() {
    $scale_value = $this->options['spinner_scale'];
    $text_color = $this->options['text_color'];
    // $bg_color = $this->options['bg_color'];
    $css = <<<CSS
    html.pg-loading {
      overflow: hidden;
    }
    html:not(.pg-loading):not(.pg-loaded) body {
      opacity: 0!important;
      visibility: hidden;
    }
    .pg-loading-screen .pg-loading-html { margin-top:0 }
    .pg-loading-html {
      transform: scale({$scale_value});
      -webkit-transform: scale({$scale_value});
    }
    .pg-loading-html .sk-rotating-plane,
    .pg-loading-html .sk-double-bounce .sk-child,
    .pg-loading-html .sk-wave .sk-rect,
    .pg-loading-html .sk-wandering-cubes .sk-cube,
    .pg-loading-html .sk-spinner-pulse,
    .pg-loading-html .sk-chasing-dots .sk-child,
    .pg-loading-html .sk-three-bounce .sk-child,
    .pg-loading-html .sk-circle .sk-child:before,
    .pg-loading-html .sk-fading-circle .sk-circle:before,
    .pg-loading-html .sk-folding-cube .sk-cube:before { background: {$text_color}; }
    .loading-message { color: {$text_color} }
CSS;
    // echo $this->get_plugin_info();
    echo sprintf("<style type='text/css'>%s</style>", $this->combine_to_oneline($css));
    // Start get document source code
    if ($this->options['auto_mode']) {
      ob_start();
    }
  }

  function add_inline_scripts() {
    $template = addslashes_gpc($this->combine_to_oneline($this->get_loading_template()));
    $spinner_style = addslashes_gpc($this->combine_to_oneline($this->options['spinner_styles'][$this->options['spinner_style']]));
    $delayMs = $this->options['delay'];
    $timeoutMs = $this->options['timeout'];
    $isTestMode = $this->options['test_mode'] && current_user_can('administrator') ? 'true' : 'false';
    $js = <<<JS
  var rootelem = document.querySelector('html'),
    isTestMode = ${isTestMode};
  if (window.pleaseWait) {
    loadingScreen = pleaseWait({
      logo: false,
      template: "{$template}",
      backgroundColor: "{$this->options['bg_color']}",
      loadingHtml: "{$spinner_style}",
      onLoadedCallback: function() { setTimeout(function(){rootelem.className = rootelem.className.replace('pg-loading', 'pg-loaded').trim();} , 200); }
    });
    rootelem.className += ' pg-loading';
    function hideLoadingScreen() { !isTestMode && loadingScreen.finish(); }
    document.addEventListener("DOMContentLoaded", function() { setTimeout(hideLoadingScreen, {$delayMs}) });
    !!(${timeoutMs}) && setTimeout(hideLoadingScreen, {$timeoutMs}*1000);
  }
JS;
    $plugin_info = $this->get_plugin_info();
    $js_code = sprintf("<script type='text/javascript'>%s</script>", $this->combine_to_oneline($js));
    if ($this->options['auto_mode']) {
      $content = ob_get_clean();
      $content = preg_replace('/<body([^>]*)>/i', '<body$1>' . "\n{$plugin_info}{$js_code}", $content);
      echo $content;
    } else {
      echo $plugin_info;
      echo $js_code;
    }
  }
}

WpPleaseWait::getInstance();
